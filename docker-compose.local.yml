version: '3.9'

networks:
  api:
    driver: bridge

x-app-volume:  &app-volume
  type: bind
  source: ./
  target: /app


services:
  app:
    environment:
        ENVIRONMENT: production
        SERVER_HOST: app
        SERVER_PORT: 8080
        SERVER_METRICS_HOST: app
        SERVER_METRICS_PORT: 8081
        SERVER_DB_URL: db
        SERVER_REDIS_URL: redis
        SERVER_RABBITMQ_URL: rabbit
        OTEL_EXPORTER_OTLP_TRACE_ENDPOINT: jaeger:4318
        SERVER_WRITETIMEOUT: 10s
        SERVER_READTIMEOUT: 5s
        SERVER_IDLETIMEOUT: 5s
    build:
      dockerfile: local.Dockerfile
      context: ./
      target: dev
    restart: on-failure
    volumes:
      - *app-volume
    command:
      - "CompileDaemon"
      - "-log-prefix=false"
      - "-graceful-timeout=10"
      - "-graceful-kill=true"
      - "-exclude-dir=.git -exclude-dir=.run -exclude-dir=.github"
      - "-build=/go/bin/task build-api-server"
      - "-command=/app/bin/api-server"
    ports:
      - "8080:8080" # server port
      - "8081:8081" # metric server port
    healthcheck:
      test: ["CMD", "curl", "app:8080/healthz" ]
      interval: 5s
      retries: 10

  prometheus:
    depends_on:
      - app
    image: prom/prometheus:v2.40.4
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/development/external/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  jaeger:
    image: jaegertracing/all-in-one:1.52
    environment:
        COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # serve frontend
      - "4318:4318" # accept OpenTelemetry Protocol (OTLP) over HTTP
      - "4317:4317" # accept OpenTelemetry Protocol (OTLP) over gRPC
    networks:
      - api
    depends_on:
      - app